<?php
/**
 * Simple PDF Generator Class
 * Basic PDF generation for reports without external dependencies
 */

class PDFGenerator {
    private $title;
    private $headers;
    private $data;
    private $filename;
    
    public function __construct($title = 'Report') {
        $this->title = $title;
        $this->headers = [];
        $this->data = [];
        $this->filename = 'report_' . date('Y-m-d_H-i-s') . '.pdf';
    }
    
    public function setTitle($title) {
        $this->title = $title;
    }
    
    public function setFilename($filename) {
        $this->filename = $filename;
    }
    
    public function setHeaders($headers) {
        $this->headers = $headers;
    }
    
    public function addRow($row) {
        $this->data[] = $row;
    }
    
    public function setData($data) {
        $this->data = $data;
    }
    
    /**
     * Generate and output PDF using HTML to PDF conversion
     * This creates a print-friendly HTML page that can be converted to PDF
     */
    public function output() {
        // Generate HTML content for PDF
        $html = $this->generateHTML();

        // Output HTML that can be printed as PDF
        echo $html;

        // Add JavaScript to automatically trigger print dialog
        echo '<script>
            window.onload = function() {
                // Show instructions to user
                document.body.innerHTML += "<div style=\"position: fixed; top: 10px; right: 10px; background: #007bff; color: white; padding: 10px; border-radius: 5px; z-index: 1000;\">Press Ctrl+P to save as PDF</div>";

                // Optional: Auto-trigger print dialog after a short delay
                setTimeout(function() {
                    window.print();
                }, 1000);
            }
        </script>';
    }
    
    private function generateHTML() {
        $html = '<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>' . htmlspecialchars($this->title) . '</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            font-size: 12px;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #333;
            padding-bottom: 10px;
        }
        .title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        .date {
            font-size: 10px;
            color: #666;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .footer {
            margin-top: 30px;
            text-align: center;
            font-size: 10px;
            color: #666;
            border-top: 1px solid #ddd;
            padding-top: 10px;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="title">' . htmlspecialchars($this->title) . '</div>
        <div class="date">Generated on: ' . date('Y-m-d H:i:s') . '</div>
    </div>
    
    <table>
        <thead>
            <tr>';
        
        foreach ($this->headers as $header) {
            $html .= '<th>' . htmlspecialchars($header) . '</th>';
        }
        
        $html .= '</tr>
        </thead>
        <tbody>';
        
        foreach ($this->data as $row) {
            $html .= '<tr>';
            foreach ($row as $cell) {
                $html .= '<td>' . htmlspecialchars($cell) . '</td>';
            }
            $html .= '</tr>';
        }
        
        $html .= '</tbody>
    </table>
    
    <div class="footer">
        <p>Report generated by ERP System - ' . date('Y-m-d H:i:s') . '</p>
    </div>
</body>
</html>';
        
        return $html;
    }
    
    /**
     * Alternative output method that creates a proper PDF file
     * Uses a simple text-based PDF generation approach
     */
    public function outputAsPDF() {
        // Create a simple PDF using basic PDF structure
        $pdf_content = $this->generateSimplePDF();

        // Set proper PDF headers
        header('Content-Type: application/pdf');
        header('Content-Disposition: attachment; filename="' . $this->filename . '"');
        header('Content-Length: ' . strlen($pdf_content));
        header('Cache-Control: private, max-age=0, must-revalidate');
        header('Pragma: public');

        echo $pdf_content;
    }

    /**
     * Generate a simple PDF file content
     * This creates a basic but valid PDF document
     */
    private function generateSimplePDF() {
        // Basic PDF structure
        $pdf = "%PDF-1.4\n";
        $pdf .= "1 0 obj\n";
        $pdf .= "<<\n";
        $pdf .= "/Type /Catalog\n";
        $pdf .= "/Pages 2 0 R\n";
        $pdf .= ">>\n";
        $pdf .= "endobj\n\n";

        // Create content for the PDF
        $content = $this->title . "\n\n";
        $content .= "Generated on: " . date('Y-m-d H:i:s') . "\n\n";

        // Add headers
        $content .= implode(" | ", $this->headers) . "\n";
        $content .= str_repeat("-", 80) . "\n";

        // Add data rows
        foreach ($this->data as $row) {
            $content .= implode(" | ", $row) . "\n";
        }

        // Continue building PDF structure
        $pdf .= "2 0 obj\n";
        $pdf .= "<<\n";
        $pdf .= "/Type /Pages\n";
        $pdf .= "/Kids [3 0 R]\n";
        $pdf .= "/Count 1\n";
        $pdf .= ">>\n";
        $pdf .= "endobj\n\n";

        $pdf .= "3 0 obj\n";
        $pdf .= "<<\n";
        $pdf .= "/Type /Page\n";
        $pdf .= "/Parent 2 0 R\n";
        $pdf .= "/MediaBox [0 0 612 792]\n";
        $pdf .= "/Contents 4 0 R\n";
        $pdf .= "/Resources <<\n";
        $pdf .= "/Font <<\n";
        $pdf .= "/F1 5 0 R\n";
        $pdf .= ">>\n";
        $pdf .= ">>\n";
        $pdf .= ">>\n";
        $pdf .= "endobj\n\n";

        $content_length = strlen($content);
        $pdf .= "4 0 obj\n";
        $pdf .= "<<\n";
        $pdf .= "/Length $content_length\n";
        $pdf .= ">>\n";
        $pdf .= "stream\n";
        $pdf .= "BT\n";
        $pdf .= "/F1 12 Tf\n";
        $pdf .= "50 750 Td\n";

        // Add content line by line
        $lines = explode("\n", $content);
        $y_position = 750;
        foreach ($lines as $line) {
            $pdf .= "($line) Tj\n";
            $y_position -= 15;
            $pdf .= "0 -15 Td\n";
        }

        $pdf .= "ET\n";
        $pdf .= "endstream\n";
        $pdf .= "endobj\n\n";

        $pdf .= "5 0 obj\n";
        $pdf .= "<<\n";
        $pdf .= "/Type /Font\n";
        $pdf .= "/Subtype /Type1\n";
        $pdf .= "/BaseFont /Helvetica\n";
        $pdf .= ">>\n";
        $pdf .= "endobj\n\n";

        $pdf .= "xref\n";
        $pdf .= "0 6\n";
        $pdf .= "0000000000 65535 f \n";
        $pdf .= "0000000009 65535 n \n";
        $pdf .= "0000000074 65535 n \n";
        $pdf .= "0000000120 65535 n \n";
        $pdf .= "0000000179 65535 n \n";
        $pdf .= "0000000364 65535 n \n";
        $pdf .= "trailer\n";
        $pdf .= "<<\n";
        $pdf .= "/Size 6\n";
        $pdf .= "/Root 1 0 R\n";
        $pdf .= ">>\n";
        $pdf .= "startxref\n";
        $pdf .= "492\n";
        $pdf .= "%%EOF\n";

        return $pdf;
    }
}
